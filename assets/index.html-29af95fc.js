import{_ as e}from"./image-20200604160527526-be936a25.js";import{_ as i,W as t,X as a,Y as l}from"./framework-6447176f.js";const c="/assets/1589436741048-79afd2b4.png",o={},r=l('<h1 id="velocity简介" tabindex="-1"><a class="header-anchor" href="#velocity简介" aria-hidden="true">#</a> velocity简介</h1><h2 id="_1-velocity简介" tabindex="-1"><a class="header-anchor" href="#_1-velocity简介" aria-hidden="true">#</a> 1. velocity简介</h2><p>Velocity是一个基于Java的模板引擎，可以通过特定的语法获取在java对象的数据 , 填充到模板中，从而实现界面和java代码的分离 !</p><p><img src="'+e+'" alt="image-20200604160527526"></p><h2 id="_2-应用场景" tabindex="-1"><a class="header-anchor" href="#_2-应用场景" aria-hidden="true">#</a> 2. 应用场景</h2><ul><li>Web应用程序 : 作为为应用程序的视图, 展示数据。</li><li>源代码生成 : Velocity可用于基于模板生成Java源代码</li><li>自动电子邮件 : 网站注册 , 认证等的电子邮件模板</li><li>网页静态化 : 基于velocity模板 , 生成静态网页</li></ul><h2 id="_3-velocity-组成结构" tabindex="-1"><a class="header-anchor" href="#_3-velocity-组成结构" aria-hidden="true">#</a> 3. velocity 组成结构</h2><p><img src="'+c+'" alt="1589436741048"></p><p>Velocity主要分为app、context、runtime和一些辅助util几个部分。</p><ul><li>app模块 : 主要封装了一些接口 , 暴露给使用者使用。主要有两个类，分别是Velocity(单例)和VelocityEngine。</li><li>Context模块 : 主要封装了模板渲染需要的变量</li><li>Runtime模块 : 整个Velocity的核心模块，Runtime模块会将加载的模板解析成语法树，Velocity调用mergeTemplate方法时会渲染整棵树，并输出最终的渲染结果。</li><li>RuntimeInstance类为整个Velocity渲染提供了一个单例模式，拿到了这个实例就可以完成渲染过程了。</li></ul>',10),n=[r];function s(d,h){return t(),a("div",null,n)}const m=i(o,[["render",s],["__file","index.html.vue"]]);export{m as default};
